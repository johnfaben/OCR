{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xml.etree.ElementTree as ET\n",
    "import pickle\n",
    "import os\n",
    "from os import listdir, getcwd\n",
    "from os.path import join\n",
    "import sys\n",
    "from glob import glob\n",
    "\n",
    "\n",
    "\n",
    "def convert(size, box):\n",
    "    dw = 1./size[0]\n",
    "    dh = 1./size[1]\n",
    "    x = (box[0] + box[1])/2.0\n",
    "    y = (box[2] + box[3])/2.0\n",
    "    w = box[1] - box[0]\n",
    "    h = box[3] - box[2]\n",
    "    x = x*dw\n",
    "    w = w*dw\n",
    "    y = y*dh\n",
    "    h = h*dh\n",
    "    return (x,y,w,h)\n",
    "\n",
    "def convert_annotation(xml_fn):\n",
    "    in_file = open(xml_fn)\n",
    "    txt_fn=xml_fn.replace(\".xml\",\".txt\")\n",
    "    out_file = open(txt_fn, 'w')\n",
    "    tree=ET.parse(in_file)\n",
    "    root = tree.getroot()\n",
    "    size = root.find('size')\n",
    "    w = int(size.find('width').text)\n",
    "    h = int(size.find('height').text)\n",
    "\n",
    "    for obj in root.iter('object'):\n",
    "        difficult = obj.find('difficult').text\n",
    "        cls = obj.find('name').text\n",
    "        if cls not in classes or int(difficult) == 1:\n",
    "            continue\n",
    "        cls_id = classes.index(cls)\n",
    "        xmlbox = obj.find('bndbox')\n",
    "        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n",
    "        bb = convert((w,h), b)\n",
    "        #out_file.write(str(cls_id) + \" \" + \" \".join([str(a) for a in bb]) + '\\n')\n",
    "        out_file.write(f\"{cls_id} {bb[0]:0.6f} {bb[1]:0.6f} {bb[2]:0.6f} {bb[3]:0.6f}\\n\")\n",
    "        #print(f\"{txt_fn} created\")\n",
    "    in_file.close()\n",
    "    out_file.close()\n",
    "\n",
    "if len(sys.argv) != 4:\n",
    "    print(f\"Usage: {sys.argv[0]} images_dir classes.names list.txt\")\n",
    "    print(f\"Ex: {sys.argv[0]} data/cards/train data/cards.names data/train.txt\")\n",
    "    print(\"From xml files in images_dir, convert them in txt files with annotation information and build list.txt file\")\n",
    "    sys.exit(1)\n",
    "images_dir=sys.argv[1]\n",
    "classes_fn=sys.argv[2]\n",
    "list_fn=sys.argv[3]\n",
    "if not os.path.isfile(classes_fn):\n",
    "    print(f\"Classes file {classes_fn} is not a file\")\n",
    "    sys.exit(1)\n",
    "if not os.path.isdir(images_dir):\n",
    "    print(f\"{images_dir} is not a directory\")\n",
    "    sys.exit(1)\n",
    "with open(classes_fn,\"r\") as f:\n",
    "    classes=f.read().split(\"\\n\")\n",
    "classes=[c for c in classes if c!='']\n",
    "print(classes,len(classes))\n",
    "\n",
    "list_file = open(list_fn,\"w\")\n",
    "\n",
    "for i,xml_fn in enumerate(glob(images_dir+\"/*.xml\")):\n",
    "    img_fn=xml_fn.replace(\".xml\",\".jpg\")\n",
    "    convert_annotation(xml_fn)\n",
    "    list_file.write(f\"{img_fn}\\n\")\n",
    "    if (i+1)%100==0:\n",
    "        print(i+1)\n",
    "list_file.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ocr",
   "language": "python",
   "name": "ocr"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
